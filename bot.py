import os
import json
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (ApplicationBuilder, CallbackContext, CommandHandler, MessageHandler, filters,
                          CallbackQueryHandler, ConversationHandler)
import random
import asyncio

# Constants
ADMIN_ID = 6881713177
DB_FILE = "db.json"

# States for ConversationHandler
MAIN_MENU, REGISTER, PROFILE, REPORT_MENU, USERNAME_INPUT, REPORT_TYPE, IMPERSONATION_URL, REPORT_LOOP = range(8)

# Admin Panel States
ADMIN_PANEL, BROADCAST_MESSAGE, VIEW_USERS, USER_STATS = range(100, 104)

# Language strings
STRINGS = {
    'en': {
        'welcome': "ЁЯФе <b>Welcome to Premium IG Reporter</b> ЁЯФе\n\nЁЯОп <b>Ultimate Instagram Reporting Tool</b>\n\nтЪб Fast тАв ЁЯФТ Anonymous тАв ЁЯТп Effective",
        'register_prompt': "ЁЯОн <b>Welcome New User!</b>\n\nЁЯУЭ Please enter your <b>Display Name</b> to get started:",
        'registration_success': "ЁЯОЙ <b>Registration Successful!</b>\n\nтЬЕ Welcome aboard, <b>{name}</b>!\nЁЯЪА You can now access all features.",
        'main_menu': "ЁЯПа <b>Main Menu</b>\n\nЁЯСЛ Welcome, <b>{name}</b>!\nЁЯОп Choose an option below:",
        'profile': "ЁЯСд <b>Your Profile</b>\n\nЁЯУЭ Name: <b>{name}</b>\nЁЯУЕ Joined: <b>{date}</b>\nтЪб Status: <b>Active</b>",
        'report_menu': "ЁЯОп <b>Report Center</b>\n\nтЪб Choose your action:",
        'send_username': "ЁЯУ▒ <b>Enter Target Username</b>\n\nЁЯОп Send the Instagram username to report:\n\n<i>Example: @username</i>",
        'choose_report_type': "тЪФя╕П <b>Select Report Type</b>\n\nЁЯОп Choose violation category:",
        'ask_impersonation_url': "ЁЯФЧ <b>Impersonation Details</b>\n\nЁЯУО Send the link of the account being impersonated:",
        'confirm_start': "ЁЯЪА <b>Ready to Launch</b>\n\nЁЯОп Target: <b>@{username}</b>\nтЪФя╕П Type: <b>{type}</b>\n\nтЬЕ Press START to begin",
        'reporting_started': "тЪб <b>Report Attack Initiated</b>\n\nЁЯОп Target: <b>@{username}</b>\nЁЯФе Status: <b>ACTIVE</b>",
        'reporting_stopped': "тП╣я╕П <b>Report Attack Stopped</b>\n\nЁЯУК Session ended by user",
        'report_success': "тЬЕ <b>Report #{count} Sent</b>\nЁЯОп Target: <b>@{username}</b>\nтЪб Status: <b>SUCCESS</b>",
        'report_failed': "тЭМ <b>Report #{count} Failed</b>\nЁЯОп Target: <b>@{username}</b>\nтЪая╕П Status: <b>RETRY</b>",
        'admin_panel': "ЁЯЫая╕П <b>Admin Control Panel</b>\n\nЁЯСС Administrator Dashboard",
        'user_stats': "ЁЯУК <b>Bot Statistics</b>\n\nЁЯСе Total Users: <b>{total}</b>\nтЪб Active (24h): <b>{active}</b>\nЁЯУЕ Today's Joins: <b>{today}</b>"
    },
    'hi': {
        'welcome': "ЁЯФе <b>Premium IG Reporter рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ</b> ЁЯФе\n\nЁЯОп <b>Ultimate Instagram Reporting Tool</b>\n\nтЪб рддреЗрдЬ тАв ЁЯФТ рдЧреБрдордирд╛рдо тАв ЁЯТп рдкреНрд░рднрд╛рд╡реА",
        'register_prompt': "ЁЯОн <b>рдирдП рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!</b>\n\nЁЯУЭ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ <b>рдирд╛рдо</b> рджрд░реНрдЬ рдХрд░реЗрдВ:",
        'registration_success': "ЁЯОЙ <b>рдкрдВрдЬреАрдХрд░рдг рд╕рдлрд▓!</b>\n\nтЬЕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, <b>{name}</b>!\nЁЯЪА рдЕрдм рдЖрдк рд╕рднреА рдлреАрдЪрд░реНрд╕ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
        'main_menu': "ЁЯПа <b>рдореБрдЦреНрдп рдореЗрдиреВ</b>\n\nЁЯСЛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ, <b>{name}</b>!\nЁЯОп рдиреАрдЪреЗ рд╕реЗ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:",
        'profile': "ЁЯСд <b>рдЖрдкрдХреА рдкреНрд░реЛрдлрд╛рдЗрд▓</b>\n\nЁЯУЭ рдирд╛рдо: <b>{name}</b>\nЁЯУЕ рд╢рд╛рдорд┐рд▓: <b>{date}</b>\nтЪб рд╕реНрдерд┐рддрд┐: <b>рд╕рдХреНрд░рд┐рдп</b>",
        'report_menu': "ЁЯОп <b>рд░рд┐рдкреЛрд░реНрдЯ рд╕реЗрдВрдЯрд░</b>\n\nтЪб рдЕрдкрдиреА рдХрд╛рд░реНрд░рд╡рд╛рдИ рдЪреБрдиреЗрдВ:",
        'send_username': "ЁЯУ▒ <b>Target Username рджрд░реНрдЬ рдХрд░реЗрдВ</b>\n\nЁЯОп Instagram username рднреЗрдЬреЗрдВ:\n\n<i>рдЙрджрд╛рд╣рд░рдг: @username</i>",
        'choose_report_type': "тЪФя╕П <b>рд░рд┐рдкреЛрд░реНрдЯ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ</b>\n\nЁЯОп рдЙрд▓реНрд▓рдВрдШрди рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:",
        'ask_impersonation_url': "ЁЯФЧ <b>Impersonation рд╡рд┐рд╡рд░рдг</b>\n\nЁЯУО рдЙрд╕ рдЕрдХрд╛рдЙрдВрдЯ рдХрд╛ рд▓рд┐рдВрдХ рднреЗрдЬреЗрдВ рдЬрд┐рд╕рдХреА рдирдХрд▓ рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ:",
        'confirm_start': "ЁЯЪА <b>рд▓реЙрдиреНрдЪ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░</b>\n\nЁЯОп Target: <b>@{username}</b>\nтЪФя╕П рдкреНрд░рдХрд╛рд░: <b>{type}</b>\n\nтЬЕ START рджрдмрд╛рдПрдВ",
        'reporting_started': "тЪб <b>рд░рд┐рдкреЛрд░реНрдЯ рдЕрдЯреИрдХ рд╢реБрд░реВ</b>\n\nЁЯОп Target: <b>@{username}</b>\nЁЯФе рд╕реНрдерд┐рддрд┐: <b>рд╕рдХреНрд░рд┐рдп</b>",
        'reporting_stopped': "тП╣я╕П <b>рд░рд┐рдкреЛрд░реНрдЯ рдЕрдЯреИрдХ рдмрдВрдж</b>\n\nЁЯУК рд╕реЗрд╢рди рд╕рдорд╛рдкреНрдд",
        'report_success': "тЬЕ <b>рд░рд┐рдкреЛрд░реНрдЯ #{count} рднреЗрдЬреА рдЧрдИ</b>\nЁЯОп Target: <b>@{username}</b>\nтЪб рд╕реНрдерд┐рддрд┐: <b>рд╕рдлрд▓</b>",
        'report_failed': "тЭМ <b>рд░рд┐рдкреЛрд░реНрдЯ #{count} рдЕрд╕рдлрд▓</b>\nЁЯОп Target: <b>@{username}</b>\nтЪая╕П рд╕реНрдерд┐рддрд┐: <b>рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕</b>",
        'admin_panel': "ЁЯЫая╕П <b>рдПрдбрдорд┐рди рдХрдВрдЯреНрд░реЛрд▓ рдкреИрдирд▓</b>\n\nЁЯСС рдкреНрд░рд╢рд╛рд╕рдХ рдбреИрд╢рдмреЛрд░реНрдб",
        'user_stats': "ЁЯУК <b>рдмреЙрдЯ рдЖрдВрдХрдбрд╝реЗ</b>\n\nЁЯСе рдХреБрд▓ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: <b>{total}</b>\nтЪб рд╕рдХреНрд░рд┐рдп (24рдШрдВ): <b>{active}</b>\nЁЯУЕ рдЖрдЬ рдХреЗ рдирдП: <b>{today}</b>"
    }
}

# Report types with emojis
REPORT_TYPES = {
    'hate': 'ЁЯШб Hate Speech / рдирдлрд░рдд рдлреИрд▓рд╛рдирд╛',
    'selfharm': 'ЁЯЖШ Self-Harm / рдЖрддреНрдо-рд╣рд╛рдирд┐',
    'bully': 'ЁЯСК Bullying / рдзрдордХрд╛рдирд╛',
    'terrorism': 'ЁЯТг Terrorism / рдЖрддрдВрдХрд╡рд╛рдж',
    'impersonation': 'ЁЯОн Impersonation / рдирдХрд▓',
    'spam': 'ЁЯУз Spam / рд╕реНрдкреИрдо',
    'violence': 'тЪФя╕П Violence / рд╣рд┐рдВрд╕рд╛',
    'drugs': 'ЁЯТК Drugs / рдирд╢рд╛'
}

# User session storage
sessions = {}
active_reports = {}

# Load/Save user data
def load_db():
    if os.path.exists(DB_FILE):
        try:
            with open(DB_FILE, "r") as f:
                return json.load(f)
        except:
            return {}
    return {}

user_db = load_db()

def save_db():
    try:
        with open(DB_FILE, "w") as f:
            json.dump(user_db, f, indent=2)
    except Exception as e:
        print(f"Error saving database: {e}")

def get_main_keyboard(lang='en'):
    if lang == 'hi':
        return ReplyKeyboardMarkup([
            [KeyboardButton("ЁЯОп рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ"), KeyboardButton("ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓")],
            [KeyboardButton("ЁЯУК рдореЗрд░реА рд░рд┐рдкреЛрд░реНрдЯреНрд╕"), KeyboardButton("ЁЯПа рд╣реЛрдо")],
            [KeyboardButton("ЁЯМР рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ"), KeyboardButton("тД╣я╕П рд╕рд╣рд╛рдпрддрд╛")]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            [KeyboardButton("ЁЯОп Start Report"), KeyboardButton("ЁЯСд Profile")],
            [KeyboardButton("ЁЯУК My Reports"), KeyboardButton("ЁЯПа Home")],
            [KeyboardButton("ЁЯМР Language"), KeyboardButton("тД╣я╕П Help")]
        ], resize_keyboard=True)

async def start(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    now = datetime.now().isoformat()
    
    # Check if user exists
    if user_id not in user_db:
        keyboard = [
            [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data='lang_en')],
            [InlineKeyboardButton("ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА", callback_data='lang_hi')]
        ]
        
        await update.message.reply_text(
            STRINGS['en']['welcome'] + '\n\nЁЯМР <b>Choose Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:</b>',
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return REGISTER
    else:
        # Update last active
        user_db[user_id]["last_active"] = now
        save_db()
        
        lang = user_db[user_id].get('lang', 'en')
        name = user_db[user_id].get('display_name', 'User')
        
        await update.message.reply_text(
            STRINGS[lang]['main_menu'].format(name=name),
            reply_markup=get_main_keyboard(lang),
            parse_mode='HTML'
        )
        return MAIN_MENU

async def handle_language_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    lang = query.data.split('_')[1]
    context.user_data['lang'] = lang
    
    await query.edit_message_text(
        STRINGS[lang]['register_prompt'],
        parse_mode='HTML'
    )
    return REGISTER

async def handle_registration(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    display_name = update.message.text.strip()
    lang = context.user_data.get('lang', 'en')
    now = datetime.now().isoformat()
    
    # Save user data
    user_db[user_id] = {
        "username": update.effective_user.username or "Unknown",
        "display_name": display_name,
        "lang": lang,
        "joined_at": now,
        "last_active": now,
        "total_reports": 0
    }
    save_db()
    
    await update.message.reply_text(
        STRINGS[lang]['registration_success'].format(name=display_name),
        parse_mode='HTML'
    )
    
    await asyncio.sleep(2)
    
    await update.message.reply_text(
        STRINGS[lang]['main_menu'].format(name=display_name),
        reply_markup=get_main_keyboard(lang),
        parse_mode='HTML'
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    user_data = user_db.get(user_id, {})
    lang = user_data.get('lang', 'en')
    name = user_data.get('display_name', 'User')
    text = update.message.text
    
    if text in ["ЁЯОп Start Report", "ЁЯОп рд░рд┐рдкреЛрд░реНрдЯ рдХрд░реЗрдВ"]:
        await update.message.reply_text(
            STRINGS[lang]['report_menu'],
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("ЁЯЪА New Report / рдирдИ рд░рд┐рдкреЛрд░реНрдЯ", callback_data="new_report")
            ]]),
            parse_mode='HTML'
        )
        return REPORT_MENU
        
    elif text in ["ЁЯСд Profile", "ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓"]:
        join_date = datetime.fromisoformat(user_data.get('joined_at', '')).strftime('%d/%m/%Y')
        await update.message.reply_text(
            STRINGS[lang]['profile'].format(name=name, date=join_date),
            parse_mode='HTML'
        )
        return MAIN_MENU
        
    elif text in ["ЁЯПа Home", "ЁЯПа рд╣реЛрдо"]:
        await update.message.reply_text(
            STRINGS[lang]['main_menu'].format(name=name),
            reply_markup=get_main_keyboard(lang),
            parse_mode='HTML'
        )
        return MAIN_MENU
        
    elif text in ["ЁЯМР Language", "ЁЯМР рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ"]:
        keyboard = [
            [InlineKeyboardButton("ЁЯЗ║ЁЯЗ╕ English", callback_data='change_lang_en')],
            [InlineKeyboardButton("ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА", callback_data='change_lang_hi')]
        ]
        await update.message.reply_text(
            "ЁЯМР <b>Select Language / рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return MAIN_MENU
    
    return MAIN_MENU

async def handle_report_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    lang = user_db.get(user_id, {}).get('lang', 'en')
    
    if query.data == "new_report":
        await query.edit_message_text(
            STRINGS[lang]['send_username'],
            parse_mode='HTML'
        )
        return USERNAME_INPUT

async def handle_username_input(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    lang = user_db.get(user_id, {}).get('lang', 'en')
    username = update.message.text.strip().replace('@', '')
    
    context.user_data['target_username'] = username
    
    # Create report type buttons
    keyboard = []
    for key, value in REPORT_TYPES.items():
        keyboard.append([InlineKeyboardButton(value, callback_data=f'type_{key}')])
    
    await update.message.reply_text(
        STRINGS[lang]['choose_report_type'],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return REPORT_TYPE

async def handle_report_type(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    lang = user_db.get(user_id, {}).get('lang', 'en')
    report_type = query.data.split('_')[1]
    
    context.user_data['report_type'] = report_type
    
    if report_type == 'impersonation':
        await query.edit_message_text(
            STRINGS[lang]['ask_impersonation_url'],
            parse_mode='HTML'
        )
        return IMPERSONATION_URL
    else:
        username = context.user_data['target_username']
        type_name = REPORT_TYPES[report_type]
        
        keyboard = [
            [InlineKeyboardButton("ЁЯЪА START", callback_data='start_report')],
            [InlineKeyboardButton("тЭМ CANCEL", callback_data='cancel_report')]
        ]
        
        await query.edit_message_text(
            STRINGS[lang]['confirm_start'].format(username=username, type=type_name),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        return REPORT_LOOP

async def handle_impersonation_url(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    lang = user_db.get(user_id, {}).get('lang', 'en')
    
    context.user_data['impersonation_url'] = update.message.text
    username = context.user_data['target_username']
    
    keyboard = [
        [InlineKeyboardButton("ЁЯЪА START", callback_data='start_report')],
        [InlineKeyboardButton("тЭМ CANCEL", callback_data='cancel_report')]
    ]
    
    await update.message.reply_text(
        STRINGS[lang]['confirm_start'].format(username=username, type=REPORT_TYPES['impersonation']),
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return REPORT_LOOP

async def handle_report_loop(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    lang = user_db.get(user_id, {}).get('lang', 'en')
    username = context.user_data.get('target_username', '')
    
    if query.data == 'start_report':
        # Start infinite reporting
        active_reports[user_id] = True
        
        keyboard = [[InlineKeyboardButton("тП╣я╕П STOP REPORT", callback_data='stop_report')]]
        
        await query.edit_message_text(
            STRINGS[lang]['reporting_started'].format(username=username),
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )
        
        # Start the infinite reporting loop
        await start_infinite_reporting(context, user_id, username, lang)
        
    elif query.data == 'stop_report':
        active_reports[user_id] = False
        await query.edit_message_text(
            STRINGS[lang]['reporting_stopped'],
            parse_mode='HTML'
        )
        
        # Return to main menu
        name = user_db.get(user_id, {}).get('display_name', 'User')
        await context.bot.send_message(
            chat_id=user_id,
            text=STRINGS[lang]['main_menu'].format(name=name),
            reply_markup=get_main_keyboard(lang),
            parse_mode='HTML'
        )
        return MAIN_MENU
        
    elif query.data == 'cancel_report':
        name = user_db.get(user_id, {}).get('display_name', 'User')
        await query.edit_message_text(
            STRINGS[lang]['main_menu'].format(name=name),
            parse_mode='HTML'
        )
        return MAIN_MENU
    
    return REPORT_LOOP

async def start_infinite_reporting(context: CallbackContext, user_id: str, username: str, lang: str):
    report_count = 0
    
    while active_reports.get(user_id, False):
        try:
            report_count += 1
            
            # Random success/failure
            if random.choice([True, False, True]):  # 66% success rate
                message = STRINGS[lang]['report_success'].format(count=report_count, username=username)
            else:
                message = STRINGS[lang]['report_failed'].format(count=report_count, username=username)
            
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            # Update user stats
            if user_id in user_db:
                user_db[user_id]['total_reports'] = user_db[user_id].get('total_reports', 0) + 1
                save_db()
            
            # Random delay between 1-3 seconds
            await asyncio.sleep(random.uniform(1.0, 3.0))
            
        except Exception as e:
            print(f"Error in reporting loop: {e}")
            break

async def handle_language_change(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = str(query.from_user.id)
    new_lang = query.data.split('_')[2]
    
    if user_id in user_db:
        user_db[user_id]['lang'] = new_lang
        save_db()
    
    name = user_db.get(user_id, {}).get('display_name', 'User')
    
    await query.edit_message_text(
        STRINGS[new_lang]['main_menu'].format(name=name),
        parse_mode='HTML'
    )
    
    await context.bot.send_message(
        chat_id=user_id,
        text=STRINGS[new_lang]['main_menu'].format(name=name),
        reply_markup=get_main_keyboard(new_lang),
        parse_mode='HTML'
    )
    
    return MAIN_MENU

# Admin functions
async def admin(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("тЭМ <b>Access Denied!</b>", parse_mode='HTML')
        return ConversationHandler.END
    
    total_users = len(user_db)
    now = datetime.now()
    active_users = 0
    today_joins = 0
    
    for user_data in user_db.values():
        try:
            last_active = datetime.fromisoformat(user_data.get('last_active', ''))
            if last_active > now - timedelta(hours=24):
                active_users += 1
                
            joined = datetime.fromisoformat(user_data.get('joined_at', ''))
            if joined.date() == now.date():
                today_joins += 1
        except:
            continue
    
    stats = STRINGS['en']['user_stats'].format(
        total=total_users, 
        active=active_users, 
        today=today_joins
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУв Broadcast", callback_data="admin_broadcast")],
        [InlineKeyboardButton("ЁЯСе View Users", callback_data="admin_users")],
        [InlineKeyboardButton("ЁЯУК Detailed Stats", callback_data="admin_detailed_stats")]
    ]
    
    await update.message.reply_text(
        STRINGS['en']['admin_panel'] + "\n\n" + stats,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='HTML'
    )
    return ADMIN_PANEL

async def handle_admin_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "admin_detailed_stats":
        stats_text = "ЁЯУК <b>Detailed Statistics</b>\n\n"
        
        for user_id, data in user_db.items():
            name = data.get('display_name', 'Unknown')
            reports = data.get('total_reports', 0)
            lang = data.get('lang', 'en')
            stats_text += f"ЁЯСд <b>{name}</b>\n"
            stats_text += f"   ЁЯЖФ ID: {user_id}\n"
            stats_text += f"   ЁЯУК Reports: {reports}\n"
            stats_text += f"   ЁЯМР Lang: {lang}\n\n"
        
        await query.edit_message_text(stats_text[:4000], parse_mode='HTML')
    
    return ADMIN_PANEL

def main():
    # Get bot token from environment
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    if not BOT_TOKEN:
        print("тЭМ ERROR: BOT_TOKEN environment variable not found!")
        print("ЁЯУЭ Please set your Telegram bot token in the environment variables.")
        return

    try:
        print("ЁЯЪА Starting Premium IG Reporter Bot...")
        app = ApplicationBuilder().token(BOT_TOKEN).build()

        # Main conversation handler
        conv = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                REGISTER: [
                    CallbackQueryHandler(handle_language_selection, pattern='^lang_'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_registration)
                ],
                MAIN_MENU: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu),
                    CallbackQueryHandler(handle_language_change, pattern='^change_lang_')
                ],
                REPORT_MENU: [CallbackQueryHandler(handle_report_menu)],
                USERNAME_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_username_input)],
                REPORT_TYPE: [CallbackQueryHandler(handle_report_type, pattern='^type_')],
                IMPERSONATION_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_impersonation_url)],
                REPORT_LOOP: [CallbackQueryHandler(handle_report_loop)],
                ADMIN_PANEL: [CallbackQueryHandler(handle_admin_buttons)]
            },
            fallbacks=[CommandHandler('start', start)]
        )

        app.add_handler(conv)
        app.add_handler(CommandHandler("admin", admin))
        
        print("тЬЕ Bot started successfully!")
        print(f"ЁЯСС Admin ID: {ADMIN_ID}")
        app.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        print(f"тЭМ Error starting bot: {e}")

if __name__ == "__main__":
    main()
